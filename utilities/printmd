#!/usr/bin/env python3
import sys
import os
import argparse
from pathlib import Path

try:
    import pathspec
except ImportError:
    print("You need to install pathspec: pip install pathspec", file=sys.stderr)
    sys.exit(1)

def load_gitignore(base_dir="."):
    gitignore_path = Path(base_dir) / ".gitignore"
    if gitignore_path.exists():
        with open(gitignore_path, "r", encoding="utf-8") as f:
            return pathspec.PathSpec.from_lines("gitwildmatch", f)
    return pathspec.PathSpec.from_lines("gitwildmatch", [])

def print_file(path, line_numbers=False):
    print(f"file `{path}`:")
    print("```")
    try:
        with open(path, "r", encoding="utf-8", errors="replace") as f:
            if line_numbers:
                for idx, line in enumerate(f, start=1):
                    # keep line endings
                    sys.stdout.write(f"{idx:4d}\t{line}")
                # ensure newline at end
                if not line.endswith("\n"):
                    print()
            else:
                content = f.read()
                sys.stdout.write(content)
                if not content.endswith("\n"):
                    print()
    except Exception as e:
        print(f"[error opening file: {e}]", file=sys.stderr)
    print("```")
    print()

def main():
    parser = argparse.ArgumentParser(
        description="Print file contents in Markdown format."
    )
    parser.add_argument("files", nargs="+", help="Files to print")
    parser.add_argument(
        "-n", "--line-numbers", action="store_true",
        help="Show line numbers in output"
    )
    args = parser.parse_args()

    spec = load_gitignore(".")

    for path in args.files:
        rel_path = os.path.relpath(path, ".")
        if spec.match_file(rel_path):
            continue  # skip ignored files
        print_file(path, line_numbers=args.line_numbers)

if __name__ == "__main__":
    main()

